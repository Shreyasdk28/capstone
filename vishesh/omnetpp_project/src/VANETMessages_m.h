//
// Generated file, do not edit! Created by opp_msgtool 6.1 from src/VANETMessages.msg.
//

#ifndef __VANETMESSAGES_M_H
#define __VANETMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class VANETMessage;
class BeaconMessage;
class EmergencyMessage;
/**
 * Class generated from <tt>src/VANETMessages.msg:2</tt> by opp_msgtool.
 * <pre>
 * // Message definitions for VANET communication
 * packet VANETMessage
 * {
 *     int sourceId;  // ID of the sending vehicle
 *     int destinationId;  // ID of the destination vehicle (-1 for broadcast)
 *     string messageType;  // Type of message (e.g., "BEACON", "EMERGENCY", "INFO")
 *     double positionX;  // X coordinate of sender
 *     double positionY;  // Y coordinate of sender
 *     double speed;  // Current speed of sender
 *     double timestamp;  // Time when message was sent
 * }
 * </pre>
 */
class VANETMessage : public ::omnetpp::cPacket
{
  protected:
    int sourceId = 0;
    int destinationId = 0;
    omnetpp::opp_string messageType;
    double positionX = 0;
    double positionY = 0;
    double speed = 0;
    double timestamp = 0;

  private:
    void copy(const VANETMessage& other);

  protected:
    bool operator==(const VANETMessage&) = delete;

  public:
    VANETMessage(const char *name=nullptr, short kind=0);
    VANETMessage(const VANETMessage& other);
    virtual ~VANETMessage();
    VANETMessage& operator=(const VANETMessage& other);
    virtual VANETMessage *dup() const override {return new VANETMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);

    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);

    virtual const char * getMessageType() const;
    virtual void setMessageType(const char * messageType);

    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);

    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);

    virtual double getSpeed() const;
    virtual void setSpeed(double speed);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VANETMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VANETMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/VANETMessages.msg:12</tt> by opp_msgtool.
 * <pre>
 * packet BeaconMessage extends VANETMessage
 * {
 * }
 * </pre>
 */
class BeaconMessage : public ::VANETMessage
{
  protected:

  private:
    void copy(const BeaconMessage& other);

  protected:
    bool operator==(const BeaconMessage&) = delete;

  public:
    BeaconMessage(const char *name=nullptr, short kind=0);
    BeaconMessage(const BeaconMessage& other);
    virtual ~BeaconMessage();
    BeaconMessage& operator=(const BeaconMessage& other);
    virtual BeaconMessage *dup() const override {return new BeaconMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BeaconMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BeaconMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/VANETMessages.msg:16</tt> by opp_msgtool.
 * <pre>
 * packet EmergencyMessage extends VANETMessage
 * {
 *     string emergencyType;  // Type of emergency
 *     int priority;  // Priority level of emergency
 * }
 * </pre>
 */
class EmergencyMessage : public ::VANETMessage
{
  protected:
    omnetpp::opp_string emergencyType;
    int priority = 0;

  private:
    void copy(const EmergencyMessage& other);

  protected:
    bool operator==(const EmergencyMessage&) = delete;

  public:
    EmergencyMessage(const char *name=nullptr, short kind=0);
    EmergencyMessage(const EmergencyMessage& other);
    virtual ~EmergencyMessage();
    EmergencyMessage& operator=(const EmergencyMessage& other);
    virtual EmergencyMessage *dup() const override {return new EmergencyMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getEmergencyType() const;
    virtual void setEmergencyType(const char * emergencyType);

    virtual int getPriority() const;
    virtual void setPriority(int priority);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EmergencyMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EmergencyMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline VANETMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<VANETMessage*>(ptr.get<cObject>()); }
template<> inline BeaconMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<BeaconMessage*>(ptr.get<cObject>()); }
template<> inline EmergencyMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<EmergencyMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VANETMESSAGES_M_H

